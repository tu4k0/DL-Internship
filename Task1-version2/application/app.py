from application.btc_blockchain.btc_blockchain import BtcBlockchain
from application.eth_blockchain.eth_blockchain import EthBlockchain

if __name__ == '__main__':
    print('Service for manual node connection to Blockchain networks (BTC/ETH)')
    blockchainName = input('Enter Blockchain name')
    if blockchainName == 'BTC':
        BTC = BtcBlockchain()
        print(BTC.setSocket())
        print('BTC socket info: ', BTC.socket)
        print(BTC.getNodeAddresses())
        node = input('Enter node URL: ')
        port = input('Enter port: ')
        connection = BTC.connectNode(node=node, port=int(port))
        if connection:
            print('Connection status: True')
        print('Version message: ')
        request = BTC.makeMessage("version", BTC.createVersionMessage(node))
        print('Request:', BTC.encodeReceivedMessage(request))
        BTC.socket.send(request)
        response = BTC.encodeReceivedMessage(BTC.socket.recv(1024))
        print('Response: ', response)
        print('Verack message: ')
        verack_response = BTC.encodeReceivedMessage(BTC.socket.recv(1024))
        print('Response: ', verack_response)
        verack_request = BTC.makeMessage("verack", BTC.createVerackMessage())
        BTC.socket.send(verack_request)
        print('Request: ', BTC.encodeReceivedMessage(verack_request))
        print('GetHeadersBlocks: ')
        block_request = BTC.makeMessage("getheaders", BTC.createGetHeadersMessage())
        BTC.socket.send(block_request)
        print('Request: ', block_request)
        block_response = BTC.socket.recv(1024)
        print('Response: ', block_response)
        print('GetData: ')
        data = BTC.getData('1dbd981fe6985776b644b173a4d0385ddc1aa2a829688d1e0000000000000000')
        getdata_message = BTC.makeMessage('getdata', data)
        sendy = BTC.socket.send(getdata_message)
        rec = BTC.socket.recv(1024)
        print(getdata_message)
        print(rec)
        print('GetAddr: ')
        getAddr_request = BTC.createGetAddrMessage()
        BTC.socket.send(getAddr_request)
        print('Request: ', getAddr_request)
        getAddr_response = BTC.socket.recv(1024)
        print('Response: ', getAddr_response)
        print('Ping message: ')
        ping_request = BTC.makeMessage("ping", BTC.createPingMessage())
        BTC.socket.send(ping_request)
        print('Request: ', ping_request)
        ping_response = BTC.socket.recv(1024)
        print('Response: ', ping_response)
    else:
        ETH = EthBlockchain()